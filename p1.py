# Form implementation generated from reading ui file 'p1.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

#hide 'already voted' label
#add code for making the radio buttons work
#add place to store the ID of those voting
#

from PyQt6 import QtCore, QtGui, QtWidgets

import csv

from PyQt6.QtWidgets import QButtonGroup, QMainWindow


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(160, 230)
        MainWindow.setMinimumSize(QtCore.QSize(160, 230))
        MainWindow.setMaximumSize(QtCore.QSize(160, 230))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.vote_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.vote_label.setGeometry(QtCore.QRect(10, 0, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.vote_label.setFont(font)
        self.vote_label.setObjectName("vote_label")
        self.id_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.id_label.setGeometry(QtCore.QRect(20, 30, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.id_label.setFont(font)
        self.id_label.setObjectName("id_label")
        self.id_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.id_input.setGeometry(QtCore.QRect(50, 30, 91, 20))
        self.id_input.setObjectName("id_input")
        self.candi_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.candi_label.setGeometry(QtCore.QRect(30, 60, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.candi_label.setFont(font)
        self.candi_label.setObjectName("candi_label")
        self.john_button = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.john_button.setGeometry(QtCore.QRect(40, 90, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.john_button.setFont(font)
        self.john_button.setObjectName("john_button")
        self.jane_button = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.jane_button.setGeometry(QtCore.QRect(40, 120, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.jane_button.setFont(font)
        self.jane_button.setObjectName("jane_button")
        self.vote_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.vote_button.setGeometry(QtCore.QRect(30, 150, 101, 21))
        self.vote_button.setObjectName("vote_button")
        self.voted_message = QtWidgets.QLabel(parent=self.centralwidget)
        self.voted_message.setGeometry(QtCore.QRect(30, 180, 91, 20))
        self.voted_message.setObjectName("voted_message")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 160, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.vote_label.setText(_translate("MainWindow", "VOTING APPLICATION"))
        self.id_label.setText(_translate("MainWindow", "ID"))
        self.candi_label.setText(_translate("MainWindow", "CANDIDATES"))
        self.john_button.setText(_translate("MainWindow", "John"))
        self.jane_button.setText(_translate("MainWindow", "Jane"))
        self.vote_button.setText(_translate("MainWindow", "SUBMIT VOTE"))
        self.voted_message.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; color:#aa0000;\">Already Voted</span></p></body></html>"))

class MainApp(QMainWindow, Ui_MainWindow):
    """
    Function made to assign the radio buttons,
    the vote message to not be visible,
    and the submit button
    """
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.voted_message.setVisible(False)

        self.vote_button.clicked.connect(lambda : self.submit())

        self.button_group = QButtonGroup(self)
        self.button_group.addButton(self.john_button, 1)
        self.button_group.addButton(self.jane_button, 2)

        self.button_group.setExclusive(True)
        self.button_group.setId(self.john_button, 1)
        self.button_group.setId(self.jane_button, 2)
##the try and except in submit idea was from ChatGPT to figure out what was causing my code to crash
##the 'if not' blocks were from ChatGPT to ensure the user enters an ID or valid ID
    def submit(self):
        """
        Handles the vote submission process by
        validating the votes id. checking if the
        voter has already voted, writing the data
        to a csv file, and resting the form
        for the next user
        :returns: a message depending on if the vote has already voted, didn't input a valid ID or an at all
        """
        try:
            print('Submit button clicked')

            self.voted_message.setText('Enter a 5 digit ID')
            self.voted_message.setVisible(True)
            voter = self.id_input.text().rstrip()
            selected_id = self.button_group.checkedId()
            if not voter:
                self.voted_message.setText('Please enter an ID')
                self.voted_message.setVisible(True)
                return
            if not voter.isdigit() or len(voter) != 5:
                self.voted_message.setText("ID isn't 5 digits")
                self.voted_message.setVisible(True)
                return

            if self.voted(voter):
                self.voted_message.setText('Already Voted')
                self.voted_message.setVisible(True)
                return

            self.voted_message.setVisible(False)

            if selected_id == 1:
                candidate = 'John'
            elif selected_id == 2:
                candidate = 'Jane'
            else:
                self.voted_message.setText('Select a candidate')
                self.voted_message.setVisible(True)

            with open('votes.csv', 'a', newline="") as file:
                writer = csv.writer(file)
                writer.writerow([voter, candidate])


            self.id_input.clear()
            self.button_group.setExclusive(False)
            for btn in self.button_group.buttons():
                btn.setChecked(False)
            self.button_group.setExclusive(True)
            self.voted_message.setVisible(False)
            self.id_input.setFocus()

        except Exception as e:
                print(f'Exception caught in submit: {e}')

##this function was from ChatGPT to help in checking if someone has already voted
    def voted(self, voter):
        """
        Used to check if the voter has
        already voted
        :param voter: the voters ID
        :return: the 'Already Voted' message if they have, False if the file doesn't exist
        """
        try:
            with open('votes.csv', 'r') as file:
                reader = csv.reader(file)
                return voter in [row[0] for row in reader if len(row) > 0]
        except FileNotFoundError:
            return False





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainApp()
    window.show()
    sys.exit(app.exec())
